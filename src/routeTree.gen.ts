/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as ProductsImport } from './routes/products'
import { Route as DemoTwoImport } from './routes/demo-two'
import { Route as CraouselImport } from './routes/craousel'
import { Route as IndexImport } from './routes/index'

// Create/Update Routes

const ProductsRoute = ProductsImport.update({
  id: '/products',
  path: '/products',
  getParentRoute: () => rootRoute,
} as any)

const DemoTwoRoute = DemoTwoImport.update({
  id: '/demo-two',
  path: '/demo-two',
  getParentRoute: () => rootRoute,
} as any)

const CraouselRoute = CraouselImport.update({
  id: '/craousel',
  path: '/craousel',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/craousel': {
      id: '/craousel'
      path: '/craousel'
      fullPath: '/craousel'
      preLoaderRoute: typeof CraouselImport
      parentRoute: typeof rootRoute
    }
    '/demo-two': {
      id: '/demo-two'
      path: '/demo-two'
      fullPath: '/demo-two'
      preLoaderRoute: typeof DemoTwoImport
      parentRoute: typeof rootRoute
    }
    '/products': {
      id: '/products'
      path: '/products'
      fullPath: '/products'
      preLoaderRoute: typeof ProductsImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/craousel': typeof CraouselRoute
  '/demo-two': typeof DemoTwoRoute
  '/products': typeof ProductsRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/craousel': typeof CraouselRoute
  '/demo-two': typeof DemoTwoRoute
  '/products': typeof ProductsRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/craousel': typeof CraouselRoute
  '/demo-two': typeof DemoTwoRoute
  '/products': typeof ProductsRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/craousel' | '/demo-two' | '/products'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/craousel' | '/demo-two' | '/products'
  id: '__root__' | '/' | '/craousel' | '/demo-two' | '/products'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  CraouselRoute: typeof CraouselRoute
  DemoTwoRoute: typeof DemoTwoRoute
  ProductsRoute: typeof ProductsRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  CraouselRoute: CraouselRoute,
  DemoTwoRoute: DemoTwoRoute,
  ProductsRoute: ProductsRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.jsx",
      "children": [
        "/",
        "/craousel",
        "/demo-two",
        "/products"
      ]
    },
    "/": {
      "filePath": "index.jsx"
    },
    "/craousel": {
      "filePath": "craousel.jsx"
    },
    "/demo-two": {
      "filePath": "demo-two.jsx"
    },
    "/products": {
      "filePath": "products.jsx"
    }
  }
}
ROUTE_MANIFEST_END */
